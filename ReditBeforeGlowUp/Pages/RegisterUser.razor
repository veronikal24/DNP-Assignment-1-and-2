@page "/RegisterUser"
@inject IUserService iuserService
@inject NavigationManager Navigation
<h3>RegisterUser</h3>


@using Domain_A1.Models
@using ReditBeforeGlowUp.Services.Http
@using Domain_A1.DTOs

<h3>User Registration</h3>

@if (registrationSuccess)
{
    <p>Registration successful!</p> 
}
else
{
    <form>
        <div class="form-group">
            <label for="userName">Username</label>
            <input type="text" class="form-control" id="userName" @bind="user.UserName" />
        </div>
        <div class="form-group">
            <label for="password">Password</label>
            <input type="password" class="form-control" id="password" @bind="user.Password" />
        </div>
        <div class="form-group">
            <label for="age">Age</label>
            <input type="number" class="form-control" id="age" @bind="user.Age" />
        </div>
        <div class="form-group">
            <label for="email">Email</label>
            <input type="email" class="form-control" id="email" @bind="user.Email" />
        </div>
        <button class="btn btn-primary" @onclick="RegisterUserPlease">Register</button>
    </form>
    
    <!-- Notification.razor -->
@if (showNotification)
{
    <div class="notification">
        @message
    </div>
}
}

@code {
    bool registrationSuccess = false;
   
    User user = new User("", "");
    private bool showNotification = false;
    private string message = "";

    
    async Task RegisterUserPlease()
    {
        user.UserName = user.UserName;
        user.Password = user.Password;
        UserCreationDto dto = new UserCreationDto(user.UserName, user.Password);
        try
        {
            await iuserService.CreateAsync(dto);
            Navigation.NavigateTo($"/Login");
            
        }
        catch
        {
            registrationSuccess = false;
            Navigation.NavigateTo("/ViewAllPosts");
        }
        
      
       

    }
    public void ShowNotification(string message)
    {
        this.message = message;
        showNotification = true;

    // Automatically hide the notification after a few seconds
        Task.Delay(5000).ContinueWith(_ =>
        {
            showNotification = false;
            StateHasChanged(); // Notify Blazor to re-render
        });
    }
}
